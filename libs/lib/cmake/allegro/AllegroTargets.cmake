# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.12 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.12")
   message(FATAL_ERROR "CMake >= 2.8.12 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.12...3.29)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS Allegro::allegro Allegro::allegro_primitives Allegro::allegro_image Allegro::allegro_font Allegro::allegro_audio Allegro::allegro_acodec Allegro::allegro_ttf Allegro::allegro_color Allegro::allegro_memfile Allegro::allegro_physfs Allegro::allegro_dialog Allegro::allegro_video Allegro::allegro_main)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target Allegro::allegro
add_library(Allegro::allegro SHARED IMPORTED)

set_target_properties(Allegro::allegro PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "user32;gdi32;comdlg32;ole32;winmm;kernel32;psapi;shlwapi;C:/msys64/mingw64/lib/libd3d9.a;C:/msys64/mingw64/lib/libdinput8.a;opengl32;glu32"
)

# Create imported target Allegro::allegro_primitives
add_library(Allegro::allegro_primitives SHARED IMPORTED)

set_target_properties(Allegro::allegro_primitives PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Allegro::allegro"
)

# Create imported target Allegro::allegro_image
add_library(Allegro::allegro_image SHARED IMPORTED)

set_target_properties(Allegro::allegro_image PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Allegro::allegro;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libpng16.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libzlib.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libjpeg.a;/c/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libwebp.a;/c/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libsharpyuv.a"
)

# Create imported target Allegro::allegro_font
add_library(Allegro::allegro_font SHARED IMPORTED)

set_target_properties(Allegro::allegro_font PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Allegro::allegro"
)

# Create imported target Allegro::allegro_audio
add_library(Allegro::allegro_audio SHARED IMPORTED)

set_target_properties(Allegro::allegro_audio PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Allegro::allegro;C:/msys64/mingw64/lib/libdsound.a"
)

# Create imported target Allegro::allegro_acodec
add_library(Allegro::allegro_acodec SHARED IMPORTED)

set_target_properties(Allegro::allegro_acodec PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Allegro::allegro_audio;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libFLAC.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libogg.a;wsock32;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libdumb.a;m;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libopenmpt.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libzlib.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libvorbisfile.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libvorbis.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libogg.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libvorbisfile.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libvorbis.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libogg.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libopusfile.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libopus.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libogg.a"
)

# Create imported target Allegro::allegro_ttf
add_library(Allegro::allegro_ttf SHARED IMPORTED)

set_target_properties(Allegro::allegro_ttf PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Allegro::allegro_font;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libfreetype.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libzlib.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libpng16.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libzlib.a"
)

# Create imported target Allegro::allegro_color
add_library(Allegro::allegro_color SHARED IMPORTED)

set_target_properties(Allegro::allegro_color PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Allegro::allegro"
)

# Create imported target Allegro::allegro_memfile
add_library(Allegro::allegro_memfile SHARED IMPORTED)

set_target_properties(Allegro::allegro_memfile PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Allegro::allegro"
)

# Create imported target Allegro::allegro_physfs
add_library(Allegro::allegro_physfs SHARED IMPORTED)

set_target_properties(Allegro::allegro_physfs PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Allegro::allegro;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libphysfs.a"
)

# Create imported target Allegro::allegro_dialog
add_library(Allegro::allegro_dialog SHARED IMPORTED)

set_target_properties(Allegro::allegro_dialog PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Allegro::allegro"
)

# Create imported target Allegro::allegro_video
add_library(Allegro::allegro_video SHARED IMPORTED)

set_target_properties(Allegro::allegro_video PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Allegro::allegro;Allegro::allegro_audio;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libtheoradec.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libogg.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libvorbisfile.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libvorbis.a;C:/dev/allegro_winpkg/universal/allegro_deps_msys_64/lib/libogg.a"
)

# Create imported target Allegro::allegro_main
add_library(Allegro::allegro_main SHARED IMPORTED)

set_target_properties(Allegro::allegro_main PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Allegro::allegro"
)

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/AllegroTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  if(CMAKE_VERSION VERSION_LESS "3.28"
      OR NOT DEFINED _cmake_import_check_xcframework_for_${_cmake_target}
      OR NOT IS_DIRECTORY "${_cmake_import_check_xcframework_for_${_cmake_target}}")
    foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
      if(NOT EXISTS "${_cmake_file}")
        message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
      endif()
    endforeach()
  endif()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
